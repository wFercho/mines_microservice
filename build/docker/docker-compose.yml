name: mines_microservice
services:
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile.postgres
    container_name: postgres_mines
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - development
      - test
      - production
    networks:
      - mines_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  mongodb:
    build:
      context: ./mongodb
      dockerfile: Dockerfile.mongodb
    container_name: mongodb_mines
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
    profiles:
      - development
      - test
      - production
    networks:
      - mines_network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --username ${MONGO_USERNAME} --password ${MONGO_PASSWORD} --authenticationDatabase admin --eval 'db.runCommand(\"ping\").ok' | grep 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
      
  app:
    build:
      context: ../../
      dockerfile: build/docker/app/Dockerfile
    container_name: go_mines
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    profiles:
      - test
      - production
      - development
    networks:
      - iot_network
      - mines_network

volumes:
  postgres_data:
  mongodb_data:

networks:
  iot_network:
    name: iot_network
    external: true
  mines_network:
    name: mines_network
